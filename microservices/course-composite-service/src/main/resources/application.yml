api:

  common:
    version: 1.0.0
    title: Sample API
    description: Description of the API...
    termsOfServiceUrl: MINE TERMS OF SERVICE URL
    license: License
    licenseUrl: MY LICENSE URL

    contact:
      name: Natalija
      url: https://github.com/NatalijaGajic
      email: nat.gaj98@mail.com

  course-composite:

    get-composite-course:
      description: Returns a course view of the specified course id
      notes: |
        # Normal response
        If the requested course id is found the method will return information regarding:
        1. Course information
        1. Ratings
        1. Lectures
        1. Service Addresses
        (technical information regarding the addresses of the microservices that created the response)
        # Expected partial and error responses
        1. If no course information is found, a <b>404 - Not Found</b> error will be returned
        1. In no lectures or ratings are found for a course, a partial response will be returned

    create-composite-course:
      description: Creates a composite course
      notes: |
        # Normal response
        The composite product information posted to the API will be splitted up and stored as separate course-info, lecture and rating entities.
        # Expected error responses
        1. If a course with the same courseId as specified in the posted information already exists,
           an <b>422 - Unprocessable Entity</b> error with a "duplicate key" error message will be returned
    delete-composite-course:
      description: Deletes a course composite
      notes: |
        # Normal response
        Entities for course information, lectures and ratings related to the specificed courseId will be deleted.
        The implementation of the delete method is idempotent, i.e. it can be called several times with the same response.
        This means that a delete request of a non existing course will return <b>200 Ok</b>.


spring.mvc.pathmatch.matching-strategy: ant-path-matcher

server.port: 7000
server.error.include-message: always

app:
  course-service:
    host: localhost
    port: 7001
  lecture-service:
    host: localhost
    port: 7002
  rating-service:
    host: localhost
    port: 7004
  user-service:
    host: localhost
    port: 7005
    
spring.cloud.stream:
  defaultBinder: rabbit
  default.contentType: application/json
  bindings:
    output-courses:
      destination: courses
      producer:
        required-groups: auditGroup
    output-lectures:
      destination: lectures
      producer:
        required-groups: auditGroup
    output-ratings:
      destination: ratings
      producer:
        required-groups: auditGroup

spring.cloud.stream.kafka.binder:
  brokers: 127.0.0.1
  defaultBrokerPort: 9092

spring.rabbitmq:
  host: 127.0.0.1
  port: 5672
  username: guest
  password: guest

logging:
  level:
    root: INFO
    se.magnus: DEBUG

management.endpoint.health.show-details: "ALWAYS"
management.endpoints.web.exposure.include: "*"
---
spring.profiles: docker

server.port: 8080

app:
  course-service:
    host: course
    port: 8080
  lecture-service:
    host: lecture
    port: 8080
  rating-service:
    host: rating
    port: 8080
  user-service:
    host: user
    port: 8080

spring.rabbitmq.host: rabbitmq

spring.cloud.stream.kafka.binder.brokers: kafka